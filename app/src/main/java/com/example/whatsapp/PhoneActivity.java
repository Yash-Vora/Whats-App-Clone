package com.example.whatsapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.Toast;

import com.example.whatsapp.Models.UserModel;
import com.example.whatsapp.databinding.ActivityPhoneBinding;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseException;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthOptions;
import com.google.firebase.auth.PhoneAuthProvider;
import com.google.firebase.database.FirebaseDatabase;

import java.util.concurrent.TimeUnit;

public class PhoneActivity extends AppCompatActivity {


    ActivityPhoneBinding binding;
    // Declare an instance of FirebaseAuth
    private FirebaseAuth auth;
    // Declare an instance of FirebaseDatabase
    private FirebaseDatabase database;
    // The verification code generated by the system is stored in this variable
    private String verificationCodeBySystem;


    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        // Binding is used instead of findViewById
        binding = ActivityPhoneBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());


        // Here if user is not connected to the internet then no internet dialog box is shown
        if (!checkInternet())
            return;


        // Closing the progress bar
        binding.progressBar.setVisibility(View.GONE);


        // Initialize the FirebaseAuth instance
        auth = FirebaseAuth.getInstance();


        // Initialize the FirebaseDatabase instance
        database = FirebaseDatabase.getInstance();


        // Following code shows what happens when we click on "Get Verification Code" button
        // When we click on "Get Verification Code" button it will send verification code to the user mobile number
        binding.btnGetVerificationCode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // Here if user is not connected to the internet then no internet dialog box is shown
                if (!checkInternet())
                    return;

                // Here if phone number is empty it will show the error message
                else if (binding.etPhone.getText().toString().isEmpty())
                    Toast.makeText(PhoneActivity.this, "Phone number cannot be empty", Toast.LENGTH_SHORT).show();

                else {

                    // Showing the progress bar
                    binding.progressBar.setVisibility(View.VISIBLE);

                    // Here we are concatenating country code with phone number
                    binding.countryCodePicker.registerCarrierNumberEditText(binding.etPhone);

                    // Here we are calling sendVerificationCode() method where it will send verification code to the phone number entered by the user
                    // Here we are passing country code along with the phone number and space between them are removed using the trim() method
                    sendVerificationCodeToUser(binding.countryCodePicker.getFullNumberWithPlus().trim());

                }

            }
        });


        // Following code shows what happens when we click on "Sign In" button
        // When we click on "Sign In" button user have to enter verification code then it will authenticate the user and sign in user into the app
        binding.btnPhoneSignIn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // Here if user is not connected to the internet then no internet dialog box is shown
                if (!checkInternet())
                    return;

                // Here if verification code is empty it will show the error message
                else if (binding.etVerificationCode.getText().toString().isEmpty())
                    Toast.makeText(PhoneActivity.this, "Verification code cannot be empty", Toast.LENGTH_SHORT).show();

                // Here if verification code is less than 6 characters it will show the error message
                else if (binding.etVerificationCode.getText().toString().length() < 6)
                    Toast.makeText(PhoneActivity.this, "Verification code must have 6 characters", Toast.LENGTH_SHORT).show();

                else {

                    // Showing the progress bar
                    binding.progressBar.setVisibility(View.VISIBLE);

                    // Calling verifyCode() method to authenticate the user and sign in the user into the app if the user is getting verification code on the different device
                    PhoneAuthCredential credential = PhoneAuthProvider.getCredential(verificationCodeBySystem, binding.etVerificationCode.getText().toString());
                    signInWithPhoneAuthCredential(credential);

                }

            }
        });

    }



    // This method is used to show dialog box when user is not connected to mobile internet or wifi
    private boolean checkInternet() {

        // The following code is used in the dialog box if internet is not connected
        // Initialize connectivityManager
        ConnectivityManager connectivityManager = (ConnectivityManager)
                getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);

        // Get active network info
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();

        // Check network status
        // Here it will show no internet dialog box if internet is inactive and it will return false:
        // networkInfo == null                                         It means networkInfo is having null value
        // !networkInfo.isConnected()                                  It means network is not connected
        // !networkInfo.isAvailable()                                  It means network is not available
        // networkInfo.getType() != ConnectivityManager.TYPE_WIFI      It means wifi is not connected
        if (networkInfo == null || !networkInfo.isConnected() || !networkInfo.isAvailable()) {

            // Initialize dialog
            Dialog dialog = new Dialog(this);

            // Set content view
            dialog.setContentView(R.layout.sample_no_internet_dialog);

            // Set outside touch
            dialog.setCanceledOnTouchOutside(false);

            // Set dialog width and height
            dialog.getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);

            // Set transparent background
            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

            // Set animation
            dialog.getWindow().getAttributes().windowAnimations = R.style.Animation_Design_BottomSheetDialog;

            // Initialize button inside dialog box
            Button btnTryAgain = dialog.findViewById(R.id.btnTryAgain);

            // Perform on click listener on above button "btnTryAgain"
            btnTryAgain.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    // Call recreate method
                    // If internet connection is off this button won't work whenever clicked
                    // If internet connection is on this button will work dialog box will be closed and it will resume the process of app whenever clicked
                    recreate();
                }
            });

            // Show dialog box
            dialog.show();

            return false;

        }

        // If internet is active then it will return true
        else
            return true;
    }



    /* Following are some methods used when user is signing in through phone number */


    // This method is called from "Get Verification Code" button and it is used to send verification code to the user phone number
    private void sendVerificationCodeToUser(String phoneNo) {

        PhoneAuthOptions options =
                PhoneAuthOptions.newBuilder(auth)
                        .setPhoneNumber(phoneNo)                    // Phone number to verify
                        .setTimeout(60L, TimeUnit.SECONDS)   // Timeout and unit
                        .setActivity(this)                          // Activity (for callback binding)
                        .setCallbacks(mCallbacks)                   // OnVerificationStateChangedCallbacks
                        .build();
        PhoneAuthProvider.verifyPhoneNumber(options);

    }


    // This is declaration of mCallback that is used in sendVerificationCodeToUser() method
    private PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks = new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {

        @Override
        public void onCodeSent(@NonNull String s, @NonNull PhoneAuthProvider.ForceResendingToken forceResendingToken) {

            super.onCodeSent(s, forceResendingToken);

            verificationCodeBySystem = s;

            // Closing the progress bar
            binding.progressBar.setVisibility(View.GONE);

        }

        // If the user is getting verification code on the same device(device from where user is signing in) then this method is called
        // If the user is getting verification code on the same device the user will be automatically signed in without writing verification code
        @Override
        public void onVerificationCompleted(@NonNull PhoneAuthCredential phoneAuthCredential) {
            signInWithPhoneAuthCredential(phoneAuthCredential);
        }

        // If verification is failed then this method is called and following error message is shown to the user
        @Override
        public void onVerificationFailed(@NonNull FirebaseException e) {
            // Closing the progress bar
            binding.progressBar.setVisibility(View.GONE);

            Toast.makeText(PhoneActivity.this, e.getMessage(), Toast.LENGTH_LONG).show();
        }

    };


    // In this method it will authenticate the user and store data in the database using firebase
    // This method is called from the onVerificationCompleted() method if the user is getting verification code from the same device
    // This method is also called when we click on "Sign In" button if the user is getting verification code from the different device
    private void signInWithPhoneAuthCredential(PhoneAuthCredential credential) {

        // Here it will authenticate the user
        auth.signInWithCredential(credential)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    // After authenticating the user it will publish the result in this method
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {

                        // Here if authentication of user is successful that data will be stored into firebase database if it is not stored
                        // If data is already stored in the database then it will just sign in the user
                        if (task.isSuccessful()) {

                            // Storing user data in the firebase database
                            FirebaseUser user = task.getResult().getUser();
                            UserModel users = new UserModel();
                            users.setPhoneNumber(user.getPhoneNumber());
                            users.setUserName(user.getPhoneNumber());
                            database.getReference().child("Users").child(user.getUid()).setValue(users);

                            // After authentication is done successfully user will be signed in and it will move to "MainActivity" page
                            Intent moveToMainActivity = new Intent(PhoneActivity.this, MainActivity.class);
                            moveToMainActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                            startActivity(moveToMainActivity);

                        }

                        // Here if authentication fails it will show following error message to the user
                        else {

                            // Closing progress bar
                            binding.progressBar.setVisibility(View.GONE);

                            // If verification code entered is invalid then following error message is shown to the user
                            if (task.getException() instanceof FirebaseAuthInvalidCredentialsException)
                                Toast.makeText(PhoneActivity.this, "Invalid verification code", Toast.LENGTH_SHORT).show();

                            // If any other authentication error occurs then following error message is shown to the user
                            else
                                Toast.makeText(PhoneActivity.this, task.getException().getMessage(), Toast.LENGTH_LONG).show();

                        }

                    }
                });

    }

}
